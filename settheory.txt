#include<iostream.h>
#include<stdio.h>
#include<graphics.h>
#include<conio.h>
#include<stdlib.h>

class project
{
	int a[10],b[10],c[20],d[10],e[10];
	int m,n,i,j,k;
	int s,found,f;
public:
	void get_data();
	void merge();
	void intersection();
	void symmetry();
	void symm();
	void antisym();
};
void project::get_data()
{
  setbkcolor(CYAN);
  cout<<"Enter the no. of elements of 1st set A : "<<endl ;
  cin>>m;
  cout<<"Enter the elements of 1st set (without duplicate):"<<endl;
  for(i=0;i<m;i++)
  {
	 cin>>a[i];
  }
  cout<<"Enter the no. of elements of 2nd set B: "<<endl ;
  cin>>n;
  cout<<"Enter the elements of 2nd set(without duplicate):"<<endl;
  for(i=0;i<n;i++)
  {
	 cin>>b[i];
  }
 for(i=0;i<10;i++)
 {
	 d[i]=0;
  }
  for(i=0;i<10;i++)
  {
	 e[i]=0;
	 }
}
void project::merge()
{

  for(i=0;i<m;i++)
  {
	  c[i]=a[i];
  }
  for(j=0;j<n;j++)
  {
	  c[m+j]=b[j];
  }
  //print the merged array
  cout<<"Union of the two sets is "<<endl;
  for(k=0;k<m+n;k++)
  {
	 cout<<endl;
	 cout<<c[k];
  }
getch();
}


void project::intersection()
{

	int found=0;
	for(i=0;i<m;i++)
	{
	  for(j=0;j<n;j++)
	  {
		 if(a[i]==b[j])
	{
	  found+=1;
	  cout<<endl<<"common element :"<<endl<<a[i];
	  getch();
	}
}
}
}
void project::symmetry()
{

 // intersection();

  cout<<endl;
  f=0;     int k=0;
  cout<<" For symmetry A-B ";
	for(i=0;i<m;i++)
	{
	for(j=0;j<n;j++)
	{
		if(a[i]==b[j])
		break;
	}
	if(j==n)
	{

		cout<<"\t"<<a[i];
		d[k++]=a[i];
		f+=1;
		cout<<endl<<"element in d is : ";
		cout<<d[i];
	}
	}
 getch();
}
void project::symm()
{
 // intersection();
  cout<<endl;
	s=0;  int k=0;
  cout<<" For symmetry B-A ";
	for(i=0;i<n;i++)
	{
	for(j=0;j<m;j++)
	{
		if(b[i]==a[j])
		break;
	}
	if(j==m)
	{
		cout<<"\t"<<b[i];
		e[k++]=b[i];
		s+=1;
		cout<<endl<<" element in e is : ";
		cout<<e[i];
	}

		}

getch();
}



void project::antisym()
{

	symmetry();
	symm();
	cout<<endl<<"value of f"<<endl<<f;
	cout<<endl<<"value of s "<<endl<<s;
	cout<<endl<<"value of d is "<<endl;
	for(i=0;i<f;i++)
	{
		cout<<d[i];
	}

	cout<<endl<<"value of e is"<<endl;
	for(j=0;j<s;j++)
	{
		cout<<e[j];

	 }
	getch();
}


void main()
{
  /* request auto detection */
int gdriver = DETECT, gmode, errorcode;

/* initialize graphics mode */
initgraph(&gdriver, &gmode, "c:\\tc\\bgi");

/* read result of initialization */
errorcode = graphresult();

if (errorcode != grOk)  /* an error occurred */
{
   printf("Graphics error: %s\n", grapherrormsg(errorcode));
   printf("Press any key to halt:");
   getch();
   exit(1);             /* return with error code */
}
setbkcolor(RED);

  int ch;
  project p;

  do
  {
//  clrscr();
      ellipse(300,10,0,360,160,10);
  outtextxy(200,10,"Menu For the Set Operations");
    rectangle(150,30,450,280);
    outtextxy(200,50,"1. Union of two sets");
      outtextxy(200,85,"2. Intersection of two sets");
	outtextxy(200,125,"3. Symmetry of two sets(A-B)");
	  outtextxy(200,155,"4. Symmetry of two sets (B-A)");
	    outtextxy(200,185,"5. Symmetric Difference");
	      outtextxy(200,215,"6. Exit");
	      outtextxy(200,245,"Enter Your choice");

/*  cout<<" Menu for the sets"<<endl;
  cout<<"1. Union of two sets"<<endl;
  cout<<"2. Intersection of two sets"<<endl;
  cout<<"3. Symmetry of two sets(A-B)"<<endl;
  cout<<"4. Symmetry of two sets (B-A)"<<endl;
  cout<<"5. Symmetric Difference "<<endl;
  cout<<"6. exit"<<endl;
  cout<<"Enter your choice ";*/
  gotoxy(200,100);
  cin>>ch;
switch(ch)
{
case 1:   cleardevice();
	  p.get_data();
	  p.merge();
	  cleardevice();
	  break;
case 2:  cleardevice();
	  p.get_data();
	  p.intersection();
	  cleardevice();
	  break;
case 3:  cleardevice();
	  p.get_data();
	  p.symmetry();
	  cleardevice();
	  break;
case 4:  cleardevice();
	  p.get_data();
	  p.symm();
	  cleardevice();
	  break;
case 5:  cleardevice();
	  p.get_data();
	  p.antisym();
	  cleardevice();
	  break;
case 6:   exit(0);
}
}while(1);
  getch();
}